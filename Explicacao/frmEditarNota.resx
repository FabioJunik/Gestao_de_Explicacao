<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnFechar.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        o/8H4QpjDWm0IYUAAAAASUVORK5CYII=
</value>
  </data>
</root>